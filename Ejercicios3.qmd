---
title: "Ejercicios_fin_semana"
format: html
editor: visual
---

# Origen de la vida

Datos basados en:

-   [Life Before Earth](https://arxiv.org/pdf/1304.3381.pdf)
-   [Genome increase as a clock for the origin and evolution of life](https://biologydirect.biomedcentral.com/track/pdf/10.1186/1745-6150-1-17?site=biologydirect.biomedcentral.com)
-   Más información: [Kurgesagt](https://www.youtube.com/watch?v=JOiGEI9pQBs)

La siguiente tabla muestra la complejidad de ADN, eliminando las redundancias, de diferentes grupos de animales y su aparición en la tierra:

| especies    | genoma completo | genoma sin redundancia | aparición |
|-------------|-----------------|------------------------|-----------|
| mamíferos   | $3.2 · 10^9$pb  | $4.8 · 10^8$pb         | 125 ma    |
| peces       | $4.8 · 10^8$pb  | $1.6 · 10^8$pb         | 500 ma    |
| gusanos     | $9.7 · 10^7$pb  | $7.2 · 10^7$pb         | 1000ma    |
| eucariotas  | $2.9 · 10^6$pb  | $2.9 · 10^6$pb         | 2100ma    |
| procariotas | $5 · 10^5$pb    | $5 · 10^5$pb           | 3500ma    |

Las columnas significan:

-   especies: especies de animales.
-   genoma completo: Longitud del genoma de una especie medido en pares de bases de ADN.
-   genoma completo: Longitud del genoma de una especie, eliminando la redundancia, medido en pares de bases de ADN.
-   aparición: Cuando ese conjunto de especies aparecieron.

Con estos datos tratar de obtener una regresión que indique cuando apareció un organismo con solo 1 par de bases genéticas. Esto podría marcar el origen de la vida.

¿Qué columna habría que coger para hacer la regresión la del genoma completo o el que elimina la redundancia?

Ayuda: Es mejor usar escalas logarítmicas.

```{r}
df<-data.frame(especie=c("mamíferos","peces","gusanos","eucariotas","procariotas"),
           gen_total=c(3.2e9,4.8e8,9.7e7,2.9e6,5e5),
          gen_reduc=c(4.8e8,1.6e8,7.2e7,2.9e6,5e5),
          aparicion=c(-125,-500,-1000,-2100,-3550))
```

```{r}
library(ggplot2)
library(reshape2)

dfm<-melt(df,id=c("especie","aparicion"))
ggplot(data=dfm,aes(x=aparicion,y=value))+geom_point(aes(shape=variable,color=variable))+theme_bw()
```

```{r}
dflog<-df
dflog[,2:3]<- log10(dflog[,2:3])
#dflog[,4]<- -log10(-dflog[,4])
dflog

dfm<-melt(dflog,id=c("especie","aparicion"))


ggplot(data=dfm,aes(x=aparicion,y=value))+geom_point(aes(shape=variable,color=variable))+theme_bw()
```

```{r}

```




### Ejemplo con asteroides

Vamos a ver un ejemplo de clasificación usando un dataset de clasificación de asteroides descargado de: https://www.kaggle.com/shrutimehta/nasa-asteroids-classification

Los datos son sobre asteroides - NeoWs. NeoWs (Near Earth Object Web Service) es un servicio web RESTful para información de asteroides cercanos a la Tierra. Con NeoWs, un usuario puede: buscar asteroides según su fecha de aproximación más cercana a la Tierra, buscar un asteroide específico con su identificación de cuerpo pequeño JPL de la NASA, así como explorar el conjunto de datos general.

Licencia: Este dataset se distribuye bajo la licencia CCO 1.0: https://creativecommons.org/publicdomain/zero/1.0/

Leemos el dataset:

```{r}
library(dplyr, warn.conflicts = FALSE)
df_asteroids <- read.csv('./data/nasa_asteroids.csv')
str(df_asteroids)
```

La columna Hazardous nos dice si el asteroide es potencialmente peligroso o no.

```{r}
table(df_asteroids$Hazardous)
```

Vamos a ver cuantos asteroides duplicados hay:

```{r}
sum(duplicated(df_asteroids$Name))
```

```{r}
df_asteroids |> arrange(desc(Close.Approach.Date)) |> distinct(Name, .keep_all=T) -> df_asteroids
```

Eliminamos columnas innecesarias

```{r}
df_asteroids$Neo.Reference.ID<-NULL
df_asteroids$Name <- NULL
df_asteroids$Equinox <- NULL
df_asteroids$Orbiting.Body <- NULL
df_asteroids$Orbit.ID <- NULL
df_asteroids$Epoch.Date.Close.Approach <- NULL
df_asteroids$Orbit.Determination.Date <- NULL
df_asteroids$Close.Approach.Date <- NULL
```

Crearemos un modelo que mida la peligrosidad del modelo

```{r}
df_asteroids$Hazardous <- as.factor(df_asteroids$Hazardous)
```

